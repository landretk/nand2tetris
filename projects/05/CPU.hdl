// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // Instruction coding : o x x a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3

    PARTS:
    // Instruction decode
    // o (instruction[15]) -> mux
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ARegIn);
    // not o or d1 -> Aregister load
    Not(in=instruction[15], out=loadInstruction);
    Or(a=loadInstruction, b=instruction[5], out=ARegLoad);
    // a -> Choose M(1) or A(0) for ALU input
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUInY);
    // c1-c6 -> ALU
    ALU(x=ALUInX, y=ALUInY, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        zr=ZeroFlag, ng=NegFlag, out=ALUOut, out[0..15]=outM);
    // d2*o -> Dregister load
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=ALUOut, load=loadDReg, out=ALUInX);
    // d3*o -> writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Address register, in from A-instruction or from ALU, out to addressM,
    // ALU Y input(muxed with inM), and to program counter
    ARegister(in=ARegIn, load=ARegLoad, out=ARegOut, out[0..14]=addressM);

    // Program counter with load on jump, zero on reset
    Not(in=doJump, out=noJump);
    PC(in=ARegOut, reset=reset, load=doJump, inc=noJump, out[0..14]=pc);

    // Jump logic
    And(a=JumpOut, b=instruction[15], out=doJump);
    // EQ jump on j2*zr
    And(a=instruction[1], b=ZeroFlag, out=JumpEQ);
    // GT jump on j3*~zr*~ng = j3*~(zr+ng)
    Or(a=ZeroFlag, b=NegFlag, out=notGreater);
    Not(in=notGreater, out=greaterThan);
    And(a=instruction[0], b=greaterThan, out=JumpGT);
    // LT jump on j1*ng
    And(a=instruction[2], b=NegFlag, out=JumpLT);

    // Combine jump conditions
    Or(a=JumpGT, b=JumpLT, out=JumpGTLT);
    Or(a=JumpGTLT, b=JumpEQ, out=JumpOut);

}